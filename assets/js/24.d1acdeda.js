(window.webpackJsonp=window.webpackJsonp||[]).push([[24],{446:function(a,t,r){"use strict";r.r(t);var v=r(56),s=Object(v.a)({},(function(){var a=this,t=a.$createElement,r=a._self._c||t;return r("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[r("h2",{attrs:{id:"_1-初始微信小程序"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-初始微信小程序"}},[a._v("#")]),a._v(" 1) 初始微信小程序")]),a._v(" "),r("h3",{attrs:{id:"前言"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[a._v("#")]),a._v(" 前言")]),a._v(" "),r("ul",[r("li",[r("p",[a._v("这几年小程序突然火了起来，其用完就走、无须安装的便捷设计吸引了越来越多的用户愿意使用。用户的热度加上微信给小程序提供的顶级流量入口，也吸引了不少前端开发者的加入。")])]),a._v(" "),r("li",[r("p",[a._v("开发者带着固有的认知进行小程序开发的时候和常规开发不同的是：比如页面元素无法获取，只能通过setData更新页面，还有各种浏览器接口都无法正常使用。所以，很多人都难以理解，认为小程序偏偏特立独行为难开发者，其实很大程度上是因为小程序基于安全和管控考虑下的设计。")])])]),a._v(" "),r("h3",{attrs:{id:"小程序在思考什么"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#小程序在思考什么"}},[a._v("#")]),a._v(" 小程序在思考什么")]),a._v(" "),r("ul",[r("li",[r("p",[a._v("在微信 App 里，小程序直接开放给所有用户使用，这意味着可能有十几亿人会用到这个工具。面对如此大的流量入口，吸引了很多有心人的眼球。")])]),a._v(" "),r("li",[r("p",[a._v("当年互联网还不成熟的时候，许多网页开发没有做好 XSS 和 CSRF 这样的漏洞保护，导致出现用户账户被盗用、财产被转移等问题。对于小程序来说，不仅需要对各种小程序进行内容的管控，同样需要给用户和开发者提供有安全保障的环境。")])])]),a._v(" "),r("h3",{attrs:{id:"小程序的安全保障"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#小程序的安全保障"}},[a._v("#")]),a._v(" 小程序的安全保障")]),a._v(" "),r("ul",[r("li",[r("p",[a._v("在 Web 开发中，开发者可以使用 JavaScript 脚本来操作 DOM，这意味着恶意攻击者同样可以通过注入 JavaScript 脚本的方式来操控用户的页面。前面提到的 XSS 攻击便是利用了这样的漏洞，从而危害用户和网站的安全。")])]),a._v(" "),r("li",[r("p",[a._v("有些恶意的开发者也可能想要从小程序中盗取用户信息。比如，小程序提供了"),r("a",{attrs:{href:"open-data"}},[a._v("open-data")]),a._v("组件，用于无须授权的情况下可展示用户的敏感信息（昵称、头像、性别、地理位置等），如果开发者直接通过 DOM API 获取到这些信息，意味着只要用户打开了这个小程序，在未授权的情况下自己的相关信息就会被盗取。")])])]),a._v(" "),r("h3",{attrs:{id:"双线程的设计背景"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#双线程的设计背景"}},[a._v("#")]),a._v(" 双线程的设计背景")]),a._v(" "),r("ul",[r("li",[r("p",[a._v("很多风险都来自 JavaScript 脚本对网页中 DOM 的访问和操作。想要解决这个风险就得将 JavaScript 代码放置在没有浏览器环境的沙箱环境中运行。")])]),a._v(" "),r("li",[r("p",[a._v("沙箱环境听起来很复杂，但其实前端开发者经常接触到：除了浏览器环境以外，JavaScript 还会被运行在 Node.js 环境中。Node.js 是基于 Chrome V8 引擎的 JavaScript 运行环境，该环境中不存在 DOM API、window、document等对象 API 和全局对象，因此也更无操作 DOM 节点一说。")])]),a._v(" "),r("li",[r("p",[a._v("小程序也是同样的思路，它使用 iOS 内置的 JavaScriptCore 框架和在 Android 的 JSCore 引擎（最初为腾讯 x5 内核，后来是 V8 引擎），提供了一个没有浏览器相关接口的环境，用于 JavaScript 脚本的执行。")])]),a._v(" "),r("li",[r("p",[a._v("在这样的环境里，开发者无法使用浏览器相关的 API 来改变页面内容、获取敏感信息、随意跳转页面，当然也无法对用户进行恶意的攻击了。也正因为如此，在小程序里，是不存在 XSS 风险的，开发者无须主动进行防范，用户更是可以安心使用。")])])]),a._v(" "),r("h3",{attrs:{id:"双线程-setdata"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#双线程-setdata"}},[a._v("#")]),a._v(" 双线程 setData()")]),a._v(" "),r("ul",[r("li",[a._v("为什么使用setData()可以更新页面内容呢？这是因为在小程序中，界面渲染相关任务则是由单独的 WebView 线程来完成。也就是说，在小程序中，JavaScript 脚本的执行和界面渲染不在一个线程中。")])]),a._v(" "),r("h3",{attrs:{id:"双线程设计好处"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#双线程设计好处"}},[a._v("#")]),a._v(" 双线程设计好处")]),a._v(" "),r("p",[a._v("1.可以防止恶意攻击者的 XSS 攻击；")]),a._v(" "),r("p",[a._v("2.可以防止开发者恶意盗取用户敏感信息；")]),a._v(" "),r("p",[a._v("3.提升页面加载性能。（在浏览器中 GUI 渲染线程负责渲染浏览器界面 HTML 元素，JavaScript 引擎线程主要负责处理 JavaScript 脚本程序。它们之间是互斥的关系，当 JavaScript 引擎执行时，GUI 线程会被挂起。而在小程序中，由于 JavaScript 的执行和页面渲染不在一个页面中，因此也不存在阻塞的问题，页面加载得以更加流畅。）")])])}),[],!1,null,null,null);t.default=s.exports}}]);